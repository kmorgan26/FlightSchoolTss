@using FlightSchoolCm.UI.Services;
@using FlightSchoolTss.DTOs.Maintainer;
@inject IGenericApiClient<MaintainerDto> ApiClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Maintainers</PageTitle>

@if (MaintainerVms is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable Items="@MaintainerVms" T="MaintainerVm" Hover="true" Breakpoint="Breakpoint.Sm" Class="mt-4" LoadingProgressColor="Color.Info" OnRowClick="@OnRowClick">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="DELETE">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() =>OnButtonClick(context))" Color="Color.Error" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {

    [Parameter]
    public List<MaintainerVm>? MaintainerVms { get; set; }

    [Parameter]
    public EventCallback<MaintainerVm> MaintainerVm { get; set; }

    [Parameter]
    public EventCallback OnMaintainerDelete { get; set; }

    public void OnRowClick(TableRowClickEventArgs<MaintainerVm> row)
    {
        MaintainerVm.InvokeAsync(row.Item);
    }
    public async void OnButtonClick(MaintainerVm vm)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<MaintainerDialog>("Delete Maintainer?", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ApiClient.DeleteAsync(vm.Id);
            await OnMaintainerDelete.InvokeAsync();
            
            Snackbar.Add($"The Maintainer has been deleted!", MudBlazor.Severity.Success);
        }
    }
}