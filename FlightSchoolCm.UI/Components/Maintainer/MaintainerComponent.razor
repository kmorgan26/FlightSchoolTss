@inject IGenericApiClient<MaintainerDto> ApiClient
@inject IMapper Mapper
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h3">Maintainers</MudText>
    </MudItem>
    <MudItem sm="8">
        <AddForm OnMaintainerAdd="RefreshMaintainers" OnSubmitForm="CreateOrInsertAsync" _dto="_maintainerDto" ButtonText=@_buttonText />
    </MudItem>
    <MudItem xs="12">
        <MaintainerTable MaintainerVm="BindMaintainerDto" MaintainerVms="_maintainers" OnMaintainerDelete="DeleteMaintainer" />
    </MudItem>
</MudGrid>

@code {

    private List<MaintainerVm>? _maintainers;
    private MaintainerDto _maintainerDto = new();
    private string _buttonText = "ADD";

    private async Task RefreshMaintainers()
    {
        _buttonText = "ADD";
        var maintainerDTOs = await ApiClient.GetAllAsync();
        _maintainers = Mapper.Map<List<MaintainerVm>>(maintainerDTOs);
    }
    private void BindMaintainerDto(MaintainerVm vm)
    {
        _buttonText = "UPDATE";
        _maintainerDto = Mapper.Map<MaintainerDto>(vm);
    }
    private async Task CreateOrInsertAsync(MudForm _mudForm)
    {
        await _mudForm!.Validate();
        if (_mudForm.IsValid)
        {
            string operation = string.Empty;
            var dto = Mapper.Map(_maintainerDto, new MaintainerDto());

            if (_maintainerDto.Id == 0)
            {
                operation = "added";
                await ApiClient.CreateAsync(dto);
            }
            else
            {
                operation = "updated";
                await ApiClient.UpdateAsync(_maintainerDto.Id, dto);
            }
            await RefreshMaintainers();
            await _mudForm.ResetAsync();
            _maintainerDto = new();
            Snackbar.Add($"The Maintainer was Successfully {operation}!", MudBlazor.Severity.Success);
        }
    }

    public async Task DeleteMaintainer(MaintainerVm vm)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<MaintainerDialog>("Delete Maintainer?", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ApiClient.DeleteAsync(vm.Id);
            await RefreshMaintainers();

            Snackbar.Add($"The Maintainer has been deleted!", MudBlazor.Severity.Success);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshMaintainers();
    }
}