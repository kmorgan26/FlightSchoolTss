@inject IGenericApiClient<MaintainerDto> ApiClient
@inject IMapper Mapper
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<MaintainerState> State

<PageTitle>Maintainers</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h3">Maintainers</MudText>
    </MudItem>
    <MudItem sm="8">
        <CascadingValue Value="State.Value.ButtonText">
            <MaintainerForm OnSubmitForm="CreateOrInsertAsync" />
        </CascadingValue>
    </MudItem>
    <MudItem xs="12">
        <CascadingValue Value="State.Value.MaintainerDtos">
            <MaintainerTable OnMaintainerDelete="DeleteMaintainer" OnMaintainerSelect="SelectMaintainer" />
        </CascadingValue>
    </MudItem>
</MudGrid>

@code {

    private async Task RefreshMaintainers()
    {
        var action = new MaintainerButtonTextChangeAction { ButtonText = "ADD" };
        Dispatcher.Dispatch(action);

        var action_maintainers = new MaintainerCollectionChangeAction { MaintainerDtos = await ApiClient.GetAllAsync() };
        Dispatcher.Dispatch(action_maintainers);
    }

    private void SelectMaintainer(MaintainerDto dto)
    {
        if (dto is not null)
        {
            var action = new MaintainerButtonTextChangeAction { ButtonText = "UPDATE" };
            Dispatcher.Dispatch(action);

            var action_maintainer = new MaintainerDtoChangeAction { MaintainerDto = dto };
            Dispatcher.Dispatch(action_maintainer);
        }
        else
        {
            var action = new MaintainerButtonTextChangeAction { ButtonText = "ADD" };
            Dispatcher.Dispatch(action);

            var action_maintainer = new MaintainerDtoChangeAction { MaintainerDto = new() };
            Dispatcher.Dispatch(action_maintainer);
        }
    }

    private async Task CreateOrInsertAsync(MudForm _mudForm)
    {
        await _mudForm!.Validate();
        if (_mudForm.IsValid)
        {
            string operation = string.Empty;

            if (State.Value.MaintainerDto!.Id == 0)
            {
                operation = "added";
                await ApiClient.CreateAsync(State.Value.MaintainerDto);
            }
            else
            {
                operation = "updated";
                await ApiClient.UpdateAsync(State.Value.MaintainerDto.Id, State.Value.MaintainerDto);
            }
            await RefreshMaintainers();
            await _mudForm.ResetAsync();

            var action_maintainer = new MaintainerDtoChangeAction { MaintainerDto = new() };
            Dispatcher.Dispatch(action_maintainer);
            Snackbar.Add($"The Maintainer was Successfully {operation}!", MudBlazor.Severity.Success);
        }
    }

    public async Task DeleteMaintainer(MaintainerDto dto)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Maintainer?", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ApiClient.DeleteAsync(dto.Id);
            await RefreshMaintainers();

            Snackbar.Add($"The Maintainer has been deleted!", MudBlazor.Severity.Success);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshMaintainers();
    }
}