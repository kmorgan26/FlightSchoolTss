@inject IGenericApiClient<PlatformDto> ApiClient
@inject IGenericApiClient<SoftwareSystemDto> SoftwareSystemApiClient
@inject IGenericApiClient<SoftwareVersionDto> SoftwareVersionApiClient
@inject ISoftwareApiClient SoftwareApiClient
@inject IMapper Mapper
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<SoftwareState> State

<PageTitle>Software</PageTitle>

<MudGrid Spacing="2" Justify="Justify.FlexStart">
    <MudItem xs="12">
        <MudText Typo="Typo.h3">Software</MudText>
    </MudItem>
    <MudItem xs="12">
        @if (isReady)
        {
            <CascadingValue Value="@State.Value.SelectedMaintainable">
                <FSRadio TItem="RadioVm" RadioItems="@_platforms" Context="context" OnSelectedOptionChanged="ChangePlatform">
                    <RadioButtons>
                        <MudRadio Option="@context.Id" Dense>@context.Name</MudRadio>
                </RadioButtons>
            </FSRadio>
        </CascadingValue>
        }
    </MudItem>

    <MudDivider />

    <MudItem xs="12" sm="6">
        @if (State.Value.SelectedMaintainable > 0)
        {
            <CascadingValue Value="State.Value.ButtonTextSystem">
                <SoftwareSystemForm OnSubmitForm="CreateOrUpdateSystem" />
            </CascadingValue>

            <CascadingValue Value="State.Value.SoftwareSystemDtos">
                <SoftwareSystemTable OnSystemDelete="DeleteSystem" OnSystemSelect="SelectSystem" />
            </CascadingValue>
        }
    </MudItem>

    <MudItem xs="12" sm="6">
        @if (State.Value.SelectedSystemId > 0 && State.Value.SelectedMaintainable > 0)
        {
            <CascadingValue Value="State.Value.ButtonTextVersion">
                <SoftwareVersionForm OnSubmitForm="CreateOrUpdateVersion" />
            </CascadingValue>

            <CascadingValue Value="State.Value.SoftwareVersionDtos">
                <SoftwareVersionTable OnVersionDelete="DeleteVersion" OnVersionSelect="SelectVersion" />
            </CascadingValue>
        }
    </MudItem>
</MudGrid>

@code {
    private bool isReady;


    public IEnumerable<RadioVm>? _platforms { get; set; }

    private async Task ChangePlatform(int id)
    {
        var action = new SelectedMaintainableChangeAction { SelectedMaintainable = id };
        Dispatcher.Dispatch(action);
        ChangeDto(new SoftwareSystemDto());
        ChangeDto(new SoftwareVersionDto());
        await RefreshSystems();
    }

    private async Task ChangeSoftwareSystemId(int id)
    {
        var action = new SelectedSystemIdChangeAction { SelectedSystemId = id };
        Dispatcher.Dispatch(action);
        await RefreshVersions();
    }

    private async Task RefreshMaintainables()
    {
        var maintainables = await ApiClient.GetAllAsync();
        _platforms = Mapper.Map<IEnumerable<RadioVm>>(maintainables);
        
    }

    private async Task RefreshSystems()
    {
        ChangeButtonText("ADD", true);

        var action = new SoftwareSystemDtosChangeAction
            {
                SoftwareSystemDtos = await SoftwareApiClient.GetSoftwareSystemDtosByMaintainableIdAsync(State.Value.SelectedMaintainable)
            };
        Dispatcher.Dispatch(action);

        var versionAction = new SoftwareVersionDtosChangeAction
            {
                SoftwareVersionDtos = new List<SoftwareVersionDto>()
            };
        Dispatcher.Dispatch(versionAction);
    }

    private async Task RefreshVersions()
    {
        ChangeButtonText("ADD", false);

        var action = new SoftwareVersionDtosChangeAction
            {
                SoftwareVersionDtos = await SoftwareApiClient
                                                .GetSoftwareVersionDtosBySoftwareSystemIdAsync(State.Value.SoftwareSystemDto.Id)
            };
        Dispatcher.Dispatch(action);
    }

    private async Task SelectSystem(SoftwareSystemDto dto)
    {
        if (dto is not null)
        {
            ChangeButtonText("UPDATE", true);
            ChangeDto(dto);
            ChangeSystemId(dto.Id);
        }
        else
        {
            ChangeButtonText("ADD", true);
            ChangeDto(new SoftwareSystemDto());
            ChangeDto(new SoftwareVersionDto());
            ChangeSystemId(0);
        }
        await RefreshVersions();
    }

    private void SelectVersion(SoftwareVersionDto dto)
    {
        if (dto is not null)
        {
            ChangeButtonText("UPDATE", false);
            ChangeDto(dto);
            ChangeVersionId(dto.Id);
        }
        else
        {
            ChangeButtonText("ADD", false);
            ChangeDto(new SoftwareVersionDto());
            ChangeVersionId(0);
        }
    }

    private async Task DeleteSystem(SoftwareSystemDto dto)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Software System?", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await SoftwareSystemApiClient.DeleteAsync(dto.Id);
            await RefreshSystems();

            Snackbar.Add($"The Software System has been deleted!", MudBlazor.Severity.Success);
        }
    }

    private async Task DeleteVersion(SoftwareVersionDto dto)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Software Version?", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await SoftwareVersionApiClient.DeleteAsync(dto.Id);
            await RefreshSystems();

            Snackbar.Add($"The Software Version has been deleted!", MudBlazor.Severity.Success);
        }
    }

    private async Task CreateOrUpdateSystem(MudForm mudForm)
    {
        await mudForm!.Validate();

        if (mudForm.IsValid)
        {
            string operation = string.Empty;

            if (State.Value.SoftwareSystemDto!.Id == 0)
            {
                operation = "added";
                State.Value.SoftwareSystemDto!.MaintainableId = State.Value.SelectedMaintainable;
                await SoftwareSystemApiClient.CreateAsync(State.Value.SoftwareSystemDto);
            }
            else
            {
                operation = "updated";
                await SoftwareSystemApiClient.UpdateAsync(State.Value.SoftwareSystemDto.Id, State.Value.SoftwareSystemDto);
            }
            await RefreshSystems();
            await mudForm.ResetAsync();
            ChangeDto(new SoftwareSystemDto());
            Snackbar.Add($"The Software System was Successfully {operation}!", MudBlazor.Severity.Success);
        }
    }

    private async Task CreateOrUpdateVersion(MudForm mudForm)
    {
        await mudForm!.Validate();

        if (mudForm.IsValid)
        {
            string operation = string.Empty;

            if (State.Value.SoftwareVersionDto!.Id == 0)
            {
                operation = "added";
                State.Value.SoftwareVersionDto!.SoftwareSystemId = State.Value.SelectedSystemId;
                await SoftwareVersionApiClient.CreateAsync(State.Value.SoftwareVersionDto);
            }
            else
            {
                operation = "updated";
                await SoftwareVersionApiClient.UpdateAsync(State.Value.SelectedVersionId, State.Value.SoftwareVersionDto);
            }
            await RefreshVersions();
            await mudForm.ResetAsync();
            ChangeDto(new SoftwareVersionDto());
            Snackbar.Add($"The Software Version was Successfully {operation}!", MudBlazor.Severity.Success);
        }
    }

    private void ChangeButtonText(string text, bool isSystem)
    {
        if (isSystem)
        {
            var action = new SoftwareButtonTextSystemChangeAction { ButtonText = text };
            Dispatcher.Dispatch(action);
        }
        else
        {
            var action = new SoftwareButtonTextVersionChangeAction { ButtonText = text };
            Dispatcher.Dispatch(action);
        }
    }
    
    private void ChangeDto(object dto)
    {
        if (dto is SoftwareSystemDto)
        {
            var action = new SoftwareSystemDtoChangeAction { SoftwareSystemDto = (SoftwareSystemDto)dto };
            Dispatcher.Dispatch(action);
        }
        else
        {
            var action = new SoftwareVersionDtoChangeAction { SoftwareVersionDto = (SoftwareVersionDto)dto };
            Dispatcher.Dispatch(action);
        }
    }
    
    private void ChangeSystemId(int id)
    {
        var newId = new SelectedSystemIdChangeAction { SelectedSystemId = id };
        Dispatcher.Dispatch(newId);
    }
    
    private void ChangeVersionId(int id)
    {
        var newId = new SelectedVersionIdChangeAction { SelectedVersionId = id };
        Dispatcher.Dispatch(newId);
    }
    
    protected override async Task OnInitializedAsync()
    {
        isReady = false;
        await RefreshMaintainables();
        isReady = true;
    }
}
