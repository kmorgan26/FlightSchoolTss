@inject IGenericApiClient<PlatformDto> ApiClient
@inject ISoftwareApiClient SoftwareApiClient
@inject IMapper Mapper


<MudGrid>
    <MudItem lg="12">
        @if (isReady)
        {
            <CascadingValue Value="@_selectedPlatform">
                <FSRadio TItem="RadioVm" RadioItems="@_platforms" Context="context" OnSelectedOptionChanged="ChangePlatform">
                    <RadioButtons>
                        <MudRadio Option="@context.Id" Dense>@context.Name</MudRadio>
                    </RadioButtons>
                </FSRadio>
            </CascadingValue>
        }
    </MudItem>

    <MudItem>
        @if (_selectedPlatform > 0)
        {
            <SoftwareSystemList SoftwareSystemDtos="_softwareSystemDtos"
                                OnSelectedSoftwareSystemChanged="ChangeSoftwareSystemId" />
        }
    </MudItem>

    <MudItem>
        @if (_selectedSoftwareSystemId > 0)
        {
            <SoftwareVersionList SoftwareVersionDtos="_softwareVersionDtos"
                                 OnSelectedSoftwareVersionIdChanged="RefreshVersions" />
        }
    </MudItem>
    <MudItem>

    </MudItem>
</MudGrid>

@code {
    private bool isReady;

    private int _selectedPlatform { get; set; }

    private int _selectedSoftwareSystemId { get; set; }

    public IEnumerable<RadioVm>? _platforms { get; set; }

    private IEnumerable<SoftwareVersionDto>? _softwareVersionDtos { get; set; }

    private IEnumerable<SoftwareSystemDto>? _softwareSystemDtos { get; set; }

    private async Task ChangePlatform(int id)
    {
        _selectedPlatform = id;
        await RefreshSystems();
    }
    private async Task ChangeSoftwareSystemId(int id)
    {
        _selectedSoftwareSystemId = id;
        await RefreshVersions();
    }
    private async Task RefreshPlatforms()
    {
        var platforms = await ApiClient.GetAllAsync();
        _platforms = Mapper.Map<IEnumerable<RadioVm>>(platforms);
    }
    private async Task RefreshSystems()
    {
        _softwareSystemDtos = await SoftwareApiClient.GetSoftwareSystemDtosByMaintainableIdAsync(_selectedPlatform);
        _softwareVersionDtos = new List<SoftwareVersionDto>();
    }
    private async Task RefreshVersions()
    {
        _softwareVersionDtos = await SoftwareApiClient
            .GetSoftwareVersionDtosBySoftwareSystemIdAsync(_selectedSoftwareSystemId);
    }

    protected override async Task OnInitializedAsync()
    {
        isReady = false;
        await RefreshPlatforms();
        isReady = true;
    }
}
