@inject IPlatformApiClient PlatformApiClient
@inject IGenericApiClient<PlatformDto> ApiClient
@inject IGenericApiClient<MaintainableDto> MaintainableApiClient
@inject IGenericApiClient<MaintainerDto> MaintainerApiClient
@inject IMapper Mapper
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<PlatformState> State

<PageTitle>Platforms</PageTitle>

@if (State.Value.PlatformDtos is not null && _maintainers is not null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h3">Platforms</MudText>
        </MudItem>
        <MudItem sm="8">
            <CascadingValue Value="State.Value.ButtonText">
                <PlatformForm OnSubmitForm="CreateOrInsertAsync" MaintainerDtos="_maintainers" />
            </CascadingValue>
        </MudItem>
        <MudItem xs="12">
            <CascadingValue Value="State.Value.PlatformDtos">
                <PlatformTable OnPlatformDelete="DeletePlatform" OnPlatformSelect="SelectPlatform"></PlatformTable>
            </CascadingValue>
        </MudItem>
    </MudGrid>
}

@code {

    private List<MaintainerDto>? _maintainers;

    private async Task RefreshPlatforms()
    {
        ChangeButtonText("ADD");
        var _platformDtos = await PlatformApiClient.GetPlatformDetailsAsync();
        var dtos = Mapper.Map<List<PlatformDto>>(_platformDtos);
        var action_platforms = new PlatformDtosChangeAction { PlatformDtos = dtos };
        Dispatcher.Dispatch(action_platforms);
    }

    private async Task RefreshMaintainers()
    {
        _maintainers = await MaintainerApiClient.GetAllAsync();
    }

    private void SelectPlatform(PlatformDto dto)
    {
        if (dto is not null)
        {
            ChangeButtonText("UPDATE");
            ChangePlatformDto(dto);
        }
        else
        {
            ChangeButtonText("ADD");
            ChangePlatformDto(new());
        }
    }

    public async Task DeletePlatform(PlatformDto dto)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Platform?", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ApiClient.DeleteAsync(dto.Id);
            await MaintainableApiClient.DeleteAsync(dto.MaintainableId);
            await RefreshPlatforms();

            Snackbar.Add($"The Platform has been deleted!", MudBlazor.Severity.Success);
        }
    }

    private async Task CreateOrInsertAsync(MudForm _mudForm)
    {
        await _mudForm!.Validate();

        if (_mudForm.IsValid)
        {
            string operation = string.Empty;

            if (State.Value.PlatformDto!.Id == 0)
            {
                operation = "added";
                var maintainableDto =
                    await MaintainableApiClient.CreateAsync(new MaintainableDto() { Name = "Platform:" + State.Value.PlatformDto!.Name });
                State.Value.PlatformDto!.MaintainableId = maintainableDto.Id;
                await ApiClient.CreateAsync(State.Value.PlatformDto!);
            }
            else
            {
                operation = "updated";
                await ApiClient.UpdateAsync(State.Value.PlatformDto!.Id, State.Value.PlatformDto!);
            }
            await RefreshPlatforms();
            await _mudForm.ResetAsync();
            ChangePlatformDto(new());
            Snackbar.Add($"The Platform was Successfully {operation}!", MudBlazor.Severity.Success);
        }
    }

    private void ChangeButtonText(string text)
    {
        var action = new PlatformButtonTextChangeAction { ButtonText = text };
        Dispatcher.Dispatch(action);
    }

    private void ChangePlatformDto(PlatformDto dto)
    {
        var action = new PlatformDtoChangeAction { PlatformDto = dto };
        Dispatcher.Dispatch(action);
    }

    protected override async Task OnInitializedAsync()
    {
        SelectPlatform(new PlatformDto());
        await RefreshPlatforms();
        await RefreshMaintainers();
    }
}
