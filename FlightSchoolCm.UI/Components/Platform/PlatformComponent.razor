@using FlightSchoolTss.Data.DTOs.Maintainable;
@using static FlightSchoolCm.UI.Components.Platform.FormComponent;

@inject IPlatformApiClient PlatformApiClient
@inject IGenericApiClient<PlatformDto> ApiClient
@inject IGenericApiClient<MaintainableDto> MaintainableApiClient
@inject IGenericApiClient<MaintainerDto> MaintainerApiClient
@inject IMapper Mapper
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@if (_platforms is not null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h3">Platforms</MudText>
        </MudItem>
        <MudItem sm="8">
            <FormComponent OnSubmitForm="CreateOrInsertAsync" ButtonText="@_buttonText" _dto="_platformDto" MaintainerVms="_maintainers"></FormComponent>
        </MudItem>
        <MudItem xs="12">
            <PlatformTable PlatformVms="@_platforms" PlatformVm="BindPlatformDto" OnPlatformDelete="DeletePlatform"></PlatformTable>
        </MudItem>
    </MudGrid>
}

@code {

    private string _buttonText = "ADD";
    private List<PlatformTableRowVm>? _platforms;
    private PlatformDto _platformDto = new();
    private List<MaintainerVm>? _maintainers;

    private async Task RefreshPlatforms()
    {
        _buttonText = "ADD";
        var _platformDtos = await PlatformApiClient.GetPlatformDetailsAsync();
        _platforms = Mapper.Map<List<PlatformTableRowVm>>(_platformDtos);
    }
    private void BindPlatformDto(PlatformTableRowVm vm)
    {
        _buttonText = "UPDATE";
        _platformDto = Mapper.Map<PlatformDto>(vm);
    }
    private async Task RefreshMaintainers()
    {
        var _maintainerDtos = await MaintainerApiClient.GetAllAsync();
        _maintainers = Mapper.Map<List<MaintainerVm>>(_maintainerDtos);
    }

    private async Task CreateOrInsertAsync(MudForm _mudForm)
    {
        await _mudForm!.Validate();

        if (_mudForm.IsValid)
        {
            string operation = string.Empty;
            var dto = Mapper.Map(_platformDto, new PlatformDto());

            if (_platformDto.Id == 0)
            {
                operation = "added";
                var maintainableDto = await MaintainableApiClient.CreateAsync(new MaintainableDto() { Name = _platformDto.Name });
                dto.MaintainableId = maintainableDto.Id;
                await ApiClient.CreateAsync(dto);
            }
            else
            {
                operation = "updated";
                await ApiClient.UpdateAsync(_platformDto.Id, dto);
            }
            await RefreshPlatforms();
            await _mudForm.ResetAsync();
            _platformDto = new();
            Snackbar.Add($"The Platform was Successfully {operation}!", MudBlazor.Severity.Success);
        }
    }
    public async Task DeletePlatform(PlatformTableRowVm vm)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Platform?", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ApiClient.DeleteAsync(vm.Id);
            await RefreshMaintainers();

            Snackbar.Add($"The Platform has been deleted!", MudBlazor.Severity.Success);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshPlatforms();
        await RefreshMaintainers();
    }
}
