@inherits FluxorComponent
@inject IState<PlatformState> State

<FSForm OnSubmitForm="SubmitForm" TItem="PlatformDto">
    <FormControls>

        <MudGrid>
            <MudItem>

                <MudTextField @bind-Value="State.Value.PlatformDto!.Name"
                              Variant="Variant.Outlined"
                              For="(() => State.Value.PlatformDto!.Name)"
                              Label="Platform Name"
                              OnlyValidateIfDirty="true"
                              Class="my-6" />

            </MudItem>
            <MudItem>

                <MudSelect @bind-Value="@State.Value.PlatformDto!.MaintainerId"
                           T="int" 
                           Variant="Variant.Outlined"
                           For="@(() => State.Value.PlatformDto!.MaintainerId)"
                           Label="Maintainer"
                           MultiSelection="false"
                           Class="mt-6">

                    <MudSelectItem Value="0">SELECT ONE</MudSelectItem>
                    @foreach (var item in MaintainerDtos)
                    {
                        <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                    }

                </MudSelect>

            </MudItem>
            <MudItem>

                <MudCheckBox @bind-Checked="@State.Value.PlatformDto!.IsActive" Label="Is Active?" Class="mt-7" />

            </MudItem>
        </MudGrid>


        <MudHidden @bind-Value="@State.Value.PlatformDto!.MaintainableId" />


    </FormControls>
</FSForm>

@code {

    [Parameter]
    public EventCallback<MudForm> OnSubmitForm { get; set; }

    [Parameter]
    public MudForm? MudForm { get; set; } = new();

    [Parameter]
    public List<MaintainerDto> MaintainerDtos { get; set; } = null!;

    private async Task SubmitForm()
    {
        if (MudForm!.IsValid)
            await OnSubmitForm.InvokeAsync(MudForm);
    }
}