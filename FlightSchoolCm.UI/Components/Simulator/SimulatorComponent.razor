@inject IPlatformApiClient AdHocApiClient
@inject IGenericApiClient<SimulatorDto> SimulatorApiClient
@inject IGenericApiClient<PlatformDto> PlatformApiClient
@inject IGenericApiClient<MaintainableDto> MaintainableApiClient
@inject IMapper Mapper
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<SimulatorState> State

<PageTitle>Platforms</PageTitle>

@if (@State.Value.SimulatorDtos is not null && _platforms is not null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h3">Simulators</MudText>
        </MudItem>
        <MudItem sm="8">
            <CascadingValue Value="State.Value.ButtonText">
                <SimulatorForm OnSubmitForm="CreateOrInsertAsync" PlatformDtos="_platforms" />
            </CascadingValue>
        </MudItem>
        <MudItem xs="12">
            <CascadingValue Value="State.Value.SimulatorDtos">
                <SimulatorTable OnPlatformDelete="DeleteSimulator" OnPlatformSelect="SelectSimulator" />
            </CascadingValue>
        </MudItem>
    </MudGrid>
}

@code {

    private List<PlatformDto>? _platforms;

    private async Task RefreshSimulators()
    {
        ChangeButtonText("ADD");
        var simulatorDtos = await SimulatorApiClient.GetAllAsync();
        var dtos = Mapper.Map<List<SimulatorDto>>(simulatorDtos);
        var action_simulators = new SimulatorDtosChangeAction { SimulatorDtos = dtos };
        Dispatcher.Dispatch(action_simulators);
    }

    private async Task RefreshPlatforms()
    {
        _platforms = await PlatformApiClient.GetAllAsync();
    }

    private void SelectSimulator(SimulatorDto dto)
    {
        if (dto is not null)
        {
            ChangeButtonText("UPDATE");
            ChangeSimulatorDto(dto);
        }
        else
        {
            ChangeButtonText("ADD");
            ChangeSimulatorDto(new());
        }
    }

    public async Task DeleteSimulator(SimulatorDto dto)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Simulator?", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await SimulatorApiClient.DeleteAsync(dto.Id);
            await MaintainableApiClient.DeleteAsync(dto.MaintainableId);
            await RefreshSimulators();

            Snackbar.Add($"The Simulator has been deleted!", MudBlazor.Severity.Success);
        }
    }

    private async Task CreateOrInsertAsync(MudForm _mudForm)
    {
        await _mudForm!.Validate();

        if (_mudForm.IsValid)
        {
            string operation = string.Empty;

            if (State.Value.SimulatorDto!.Id == 0)
            {
                operation = "added";
                var maintainableDto = 
                    await MaintainableApiClient.CreateAsync(new MaintainableDto() { Name = "Platform:" + State.Value.SimulatorDto!.Name });
                State.Value.SimulatorDto!.MaintainableId = maintainableDto.Id;
                await SimulatorApiClient.CreateAsync(State.Value.SimulatorDto!);
            }
            else
            {
                operation = "updated";
                await SimulatorApiClient.UpdateAsync(State.Value.SimulatorDto!.Id, State.Value.SimulatorDto!);
            }
            await RefreshSimulators();
            await _mudForm.ResetAsync();
            ChangeSimulatorDto(new());
            Snackbar.Add($"The Simulator was Successfully {operation}!", MudBlazor.Severity.Success);
        }
    }

    private void ChangeButtonText(string text)
    {
        var action = new SimulatorButtonTextChangeAction { ButtonText = text };
        Dispatcher.Dispatch(action);
    }

    private void ChangeSimulatorDto(SimulatorDto dto)
    {
        var action = new SimulatorDtoChangeAction { SimulatorDto = dto };
        Dispatcher.Dispatch(action);
    }

    protected override async Task OnInitializedAsync()
    {
        SelectSimulator(new SimulatorDto());
        await RefreshSimulators();
        await RefreshPlatforms();
    }
}
