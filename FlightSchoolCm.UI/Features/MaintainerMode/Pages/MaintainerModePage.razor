@page "/mode"

@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<MaintainerModeState> MaintainerModeState
@inject IMapper Mapper
@inject IGenericApiClient<MaintainerDto> ApiClient

@if (MaintainerDtos is not null && SelectedOption > -1)
{
    <CascadingValue Value="@SelectedOption">
        <FSRadio TItem="MaintainerDto" RadioItems="@MaintainerDtos" Context="context" OnSelectedOptionChanged="ChangeMode">
            <RadioButtons>
                <MudRadio Option="@context.Id" Color="Color.Dark" Size="Size.Small">@context.Name</MudRadio>
            </RadioButtons>
        </FSRadio>
    </CascadingValue>
}

@code {

    [Parameter]
    public List<MaintainerDto>? MaintainerDtos { get; set; }

    public int SelectedOption { get; set; }

    private void ChangeMode(int mode)
    {
        SelectedOption = mode;
        var action = new MaintainerModeChangeAction { Value = mode };
        Dispatcher.Dispatch(action);
    }
    private async Task RefreshMaintainers()
    {
        MaintainerDtos = await ApiClient.GetAllAsync();
        SelectedOption = MaintainerModeState.Value.MaintainerModeId;
    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshMaintainers();
    }

}
