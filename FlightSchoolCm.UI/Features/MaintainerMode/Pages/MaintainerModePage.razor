@page "/mode"
@using FlightSchoolCm.UI.Components.FormControls
@using FlightSchoolCm.UI.Features.MaintainerMode.Store
@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<MaintainerModeState> MaintainerModeState
@inject IMaintainersApiClient MaintainersApiClient

@if (MaintainerVms is not null && SelectedOption > -1)
{
    <CascadingValue Value="@SelectedOption">
        <FstssRadio TItem="MaintainerVm" RadioItems="@MaintainerVms" Context="context" OnSelectedOptionChanged="ChangeMode">
            <RadioButtons>
                <MudRadio Option="@context.Id" Color="Color.Dark" Size="Size.Small">@context.Name</MudRadio>
            </RadioButtons>
        </FstssRadio>
    </CascadingValue>
}

@code {

    [Parameter]
    public List<MaintainerVm>? MaintainerVms { get; set; }

    public int SelectedOption { get; set; }

    private void ChangeMode(int mode)
    {
        SelectedOption = mode;
        var action = new MaintainerModeChangeAction { Value = mode };
        Dispatcher.Dispatch(action);
    }
    private async Task RefreshMaintainers()
    {
        MaintainerVms = await MaintainersApiClient.GetMaintainersAsync();
        SelectedOption = MaintainerModeState.Value.MaintainerModeId;
    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshMaintainers();
    }

}
