@page "/mode"

@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<ModeState> State
@inject IMapper Mapper
@inject IGenericApiClient<MaintainerDto> MaintainerClient
@inject IGenericApiClient<PlatformDto> PlatformClient
@inject IGenericApiClient<SimulatorDto> SimulatorClient
@inject IGenericApiClient<LotDto> LotClient
@inject IGenericApiClient<ManModuleDto> ManModuleClient
@inject IPlatformApiClient ApiClient

@inject IState<SoftwareState> SoftwareState

<MudGrid>

    @if (_maintainerDtos is not null)
    {
        <MudItem sm="12">
            <CascadingValue Value="@State.Value.MaintainerId">
                <MudChip Color="Color.Primary">Maintainers</MudChip>
                <FSRadio TItem="MaintainerDto" RadioItems="@_maintainerDtos" Context="context" OnSelectedOptionChanged="ChangeMaintainerId">
                    <RadioButtons>
                        <MudRadio Option="@context.Id" Color="Color.Dark" Size="Size.Small">@context.Name</MudRadio>
                    </RadioButtons>
                </FSRadio>
            </CascadingValue>
        </MudItem>
    }
    @if (_platformDtos is not null && State.Value.MaintainerId > 0)
    {
        <MudItem sm="12">
            <MudChip Color="Color.Success">Platforms</MudChip>
            <CascadingValue Value="@State.Value.PlatformId">
                <FSRadio TItem="PlatformDto" RadioItems="@_platformDtos" Context="context" OnSelectedOptionChanged="ChangePlatformId">
                    <RadioButtons>
                        <MudRadio Option="@context.Id" Color="Color.Dark" Size="Size.Small">@context.Name</MudRadio>
                    </RadioButtons>
                </FSRadio>
            </CascadingValue>
        </MudItem>
    }
    @if (_simulatorDtos is not null && State.Value.PlatformId > 0 && State.Value.PlatformId != 7)
    {
        <MudItem sm="12">
            <MudChip Color="Color.Info">Simulators</MudChip>
            <CascadingValue Value="@State.Value.SimulatorId">
                <FSRadio TItem="SimulatorDto" RadioItems="@_simulatorDtos" Context="context" OnSelectedOptionChanged="ChangeSimulatorId">
                    <RadioButtons>
                        <MudRadio Option="@context.Id" Color="Color.Dark" Size="Size.Small">@context.Name</MudRadio>
                    </RadioButtons>
                </FSRadio>
            </CascadingValue>
        </MudItem>
    }
    @if (_lotDtos is not null && State.Value.PlatformId == 7)
    {
        <MudItem sm="12">
            <MudChip Color="Color.Info">Lots</MudChip>
            <CascadingValue Value="@State.Value.LotId">
                <FSRadio TItem="LotDto" RadioItems="@_lotDtos" Context="context" OnSelectedOptionChanged="ChangeLotId">
                    <RadioButtons>
                        <MudRadio Option="@context.Id" Color="Color.Dark" Size="Size.Small">@context.Name</MudRadio>
                    </RadioButtons>
                </FSRadio>
            </CascadingValue>
        </MudItem>
    }
    @if (_manModuleDtos is not null && State.Value.LotId > 0)
    {
        <MudItem sm="12">
            <MudChip Color="Color.Warning">Man Modules</MudChip>
            <CascadingValue Value="@State.Value.ManModuleId">
                <FSRadio TItem="ManModuleDto" RadioItems="@_manModuleDtos" Context="context" OnSelectedOptionChanged="ChangeManModuleId">
                    <RadioButtons>
                        <MudRadio Option="@context.Id" Color="Color.Dark" Size="Size.Small">@context.Name</MudRadio>
                    </RadioButtons>
                </FSRadio>
            </CascadingValue>
        </MudItem>
    }

</MudGrid>

@code {
    private IEnumerable<MaintainerDto>? _maintainerDtos;
    private IEnumerable<PlatformDto>? _platformDtos;
    private IEnumerable<SimulatorDto>? _simulatorDtos;
    private IEnumerable<LotDto>? _lotDtos;
    private IEnumerable<ManModuleDto>? _manModuleDtos;

    private async Task ChangeMaintainerId(int id)
    {
        var action = new MaintainerIdChange { MaintainerId = id };
        Dispatcher.Dispatch(action);

        await RefreshPlatforms(id);
    }
    private async Task ChangePlatformId(int id)
    {
        var action = new PlatformIdChange { PlatformId = id };
        Dispatcher.Dispatch(action);

        await RefreshLots(id);
        await RefreshSimulators(id);
    }
    private void ChangeSimulatorId(int id)
    {
        var action = new SimulatorIdChange { SimulatorId = id };
        Dispatcher.Dispatch(action);
    }
    private async Task ChangeLotId(int id)
    {
        var action = new LotIdChange { LotId = id };
        Dispatcher.Dispatch(action);

        await RefreshManModules(id);
    }
    private void ChangeManModuleId(int id)
    {
        var action = new ManModuleIdChange { ManModuleId = id };
        Dispatcher.Dispatch(action);
    }
    private async Task RefreshPlatforms(int id)
    {
        _platformDtos = await ApiClient.GetPlatformDtosByMaintainerIdAsync(id);

        await RefreshSimulators(0);
    }
    private async Task RefreshLots(int id)
    {
        _lotDtos = await ApiClient.GetLotDtosAsync();
    }
    private async Task RefreshMaintainers()
    {
        _maintainerDtos = await MaintainerClient.GetAllAsync();
    }
    private async Task RefreshSimulators(int id)
    {
        _simulatorDtos = await ApiClient.GetSimulatorDtosByPlatformIdAsync(id);
    }
    private async Task RefreshManModules(int id)
    {
        _manModuleDtos = await ApiClient.GetManModulesByLotIdAsync(id);
    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshMaintainers();
        if (State.Value.MaintainerId > 0)
        {
            await RefreshPlatforms(State.Value.MaintainerId);
        }
        if (State.Value.PlatformId > 0)
        {
            await RefreshSimulators(State.Value.PlatformId);
            await RefreshLots(State.Value.PlatformId);
        }
        if (State.Value.LotId > 0)
        {
            await RefreshManModules(State.Value.LotId);
        }
    }
}